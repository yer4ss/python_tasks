import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os
import requests
import time
import sqlite3


bot = telebot.TeleBot('7780668347:AAFTwSbXzNg02naVu_g2x-k2GiPiYPVlOng')
api_key = '17697edb22cd6287f4a12ccb3e497513'


def get_city_info(name):
   conn = sqlite3.connect('cities.db')
   cursor = conn.cursor()
   cursor.execute('SELECT description, image_url FROM cities WHERE name = ?', (name,))
   result = cursor.fetchone()
   conn.close()
   return result


def get_city_list():
   conn = sqlite3.connect('cities.db')
   cursor = conn.cursor()
   cursor.execute('SELECT name FROM cities')
   cities = [city[0] for city in cursor.fetchall()]
   conn.close()
   return cities

cities = get_city_list()


@bot.message_handler(commands=['help'])
def help(message):
   bot.send_message(message.chat.id, 
                     "<b>–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                     "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
                     "/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –±–æ—Ç–µ\n"
                     "/about ‚Äî —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n"
                     "/stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º", parse_mode='html')

@bot.message_handler(commands=['about'])
def about(message):
   bot.send_message(message.chat.id, 
                     "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é Python –∏ Telegram API.\n"
                     "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: <em><b>yerazz</b></em>", parse_mode='html')

@bot.message_handler(commands=['stop'])
def stop(message):

   # chat_id = message.chat.id
   # for i in range(message.message_id - 20, message.message_id + 1):
   #    try:
   #       bot.delete_message(chat_id, i)
   #    except Exception as e:
   #       print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i}: {e}")

   bot.send_message(message.chat.id, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
   os._exit(0)

@bot.message_handler(commands=['start'])
def start(message):

   command_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   command_markup.row('/start', '/stop')
   command_markup.row('/help', '/about')

   bot.send_message(message.chat.id, 
                     f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                     "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É! üá∞üáø\n"
                     "–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É. üåç‚ú®", reply_markup=command_markup)

   inline_markup = types.InlineKeyboardMarkup()
   btn1 = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data='select_city')
   btn2 = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='input_city')
   inline_markup.row(btn1, btn2)

   bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",  reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: True)
def callback(callback):
   if callback.data == 'select_city':
      markup = types.InlineKeyboardMarkup()
      for city in cities:
         markup.add(types.InlineKeyboardButton(city, callback_data=city))
      bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)

   elif callback.data == 'input_city':
      msg = bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
      bot.register_next_step_handler(msg, process_city_input)

   elif callback.data in cities:
      city = callback.data
      city_info = get_city_info(city)
      if city_info:
         description, image_url = city_info
         bot.send_photo(callback.message.chat.id, open(image_url, 'rb'))
         bot.send_message(callback.message.chat.id, f"üèôÔ∏è *{city}*\n\n{description}", parse_mode='Markdown')
      else:
         bot.send_message(callback.message.chat.id, "‚ùó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def process_city_input(message):
   city_name = message.text
   city_info = get_city_info(city_name)
   if city_info:
      description, image_url = city_info
      bot.send_photo(message.chat.id, open(image_url, 'rb'))
      bot.send_message(message.chat.id, f"üèôÔ∏è {city_name}\n\n{description}", parse_mode='Markdown')
   else:
      bot.send_message(message.chat.id, "‚ùó –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

bot.polling(none_stop=True)