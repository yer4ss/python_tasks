import telebot
from telebot import types
import os
import requests
import time
import sqlite3
from bs4 import BeautifulSoup
from io import BytesIO


bot = telebot.TeleBot('7780668347:AAFTwSbXzNg02naVu_g2x-k2GiPiYPVlOng')


@bot.message_handler(commands=['start', 'stop', 'help', 'about'])
def handle_commands(message):
   if message.text == '/start':
      command_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      command_markup.row('/start', '/stop')
      command_markup.row('/help', '/about')

      bot.send_message(message.chat.id, 
                        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                        "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É! üá∞üáø\n"
                        "–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É. üåç‚ú®", reply_markup=command_markup)

      inline_markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data='city_list')
      btn2 = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='input_city')
      inline_markup.row(btn1, btn2)

      bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_markup)

   elif message.text == '/help':
      bot.send_message(message.chat.id, 
                        "<b>–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                        "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
                        "/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –±–æ—Ç–µ\n"
                        "/about ‚Äî —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n"
                        "/stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º", parse_mode='html')

   elif message.text == '/about':
      bot.send_message(message.chat.id, 
                        "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é Python –∏ Telegram API.\n"
                        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: <em><b>yerazz</b></em>", parse_mode='html')

   elif message.text == '/stop':
      bot.send_message(message.chat.id, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
      os._exit(0)



api_key = '17697edb22cd6287f4a12ccb3e497513'
weather_cache = {}
CACHE_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç

def get_weather(city):
      current_time = time.time()
      if city in weather_cache and current_time - weather_cache[city]['time'] < CACHE_TIMEOUT:
         return weather_cache[city]['data']

      url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
      response = requests.get(url).json()
      if response.get("main"):
         weather_desc = response['weather'][0]['description']
         temp = response["main"]["temp"]
         wind = response["wind"]["speed"]
         humidity = response["main"]["humidity"]
         pressure = response["main"]["pressure"]
         cloudiness = response["clouds"]["all"]

         weather_data = (
            f" {weather_desc.capitalize()}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
            f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloudiness}%"
         )
         weather_cache[city] = {'data': weather_data, 'time': current_time}
         return weather_data

      else:
         return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."



def get_city_info(name):
   conn = sqlite3.connect('cities.db')
   cursor = conn.cursor()
   cursor.execute('SELECT description, image_url, trip_code, trip_name FROM cities WHERE name = ?', (name,))
   result = cursor.fetchone()
   conn.close()
   return result

def get_city_list():
   conn = sqlite3.connect('cities.db')
   cursor = conn.cursor()
   cursor.execute('SELECT name FROM cities')
   cities = [city[0] for city in cursor.fetchall()]
   conn.close()
   return cities

cities = get_city_list()
user_data = {}



@bot.message_handler(commands=['attractions', 'hotels', 'restaurants'])
def send_places(message, trip_code, trip_name, category):
    chat_id = message.chat.id if message else callback.message.chat.id

    if trip_code is None or trip_name is None:
        user_info = user_data.get(chat_id)
        if not user_info:
            bot.send_message(chat_id, "‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")
            return
        trip_code, trip_name = user_info["trip_code"], user_info["trip_name"]


    url = f"https://www.tripadvisor.ru/Tourism-{trip_code}-{trip_name}-Vacations.html"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
    }

    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")
        sections = soup.find_all("div", class_="AOgUr")

        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
        section_titles = {
            "–ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è": "attractions",
            "–ì–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è": "hotels",
            "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏": "restaurants"
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
        command = category
        target_section = None

        # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É <h3>
        for section in sections:
            title_tag = section.find("h3", class_="biGQs _P fiohW uuBRH")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            if title_tag and title_tag.text.strip() in section_titles:
                if section_titles[title_tag.text.strip()] == command:
                    target_section = section
                    break

        if not target_section:
            bot.send_message(message.chat.id, f"‚ö† –†–∞–∑–¥–µ–ª '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        places = []
        for place in target_section.find_all("div", class_="JziVN _c")[:3]:
            name_tag = place.find("div", class_="FGwzt ukgoS")
            rating_tag = place.find("div", class_="biGQs _P pZUbB hmDzD")
            reviews_tag = place.find("div", class_="nKWJn u qMyjI")
            desc_tag = place.find("span", class_="biGQs _P pZUbB hmDzD")
            img_tag = place.find("img")

            name = name_tag.text.strip() if name_tag else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            rating = rating_tag.text.strip() if rating_tag else "–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            reviews = reviews_tag.find("div", class_="biGQs _P pZUbB hmDzD").text.strip() if reviews_tag else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
            description = desc_tag.text.strip() if desc_tag else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            img_url = img_tag["src"].split(" ")[0] if img_tag else None

            places.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                "–†–µ–π—Ç–∏–Ω–≥": rating,
                "–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤": reviews,
                "–û–ø–∏—Å–∞–Ω–∏–µ": description,
                "–ö–∞—Ä—Ç–∏–Ω–∫–∞": img_url
            })

        if places:
            for place in places:  
                if place["–ö–∞—Ä—Ç–∏–Ω–∫–∞"]:
                    img_response = requests.get(place["–ö–∞—Ä—Ç–∏–Ω–∫–∞"])
                    if img_response.status_code == 200:
                        image = BytesIO(img_response.content)
                        bot.send_photo(message.chat.id, image)
                
                bot.send_message(
                    message.chat.id, 
                    f"üèôÔ∏è {place['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({place['–†–µ–π—Ç–∏–Ω–≥']})\n"
                    f"üìå {place['–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤']} –æ—Ç–∑—ã–≤–æ–≤\n"
                    f"üìñ {place['–û–ø–∏—Å–∞–Ω–∏–µ']}"
                )
        else:
            bot.send_message(message.chat.id, f"‚ö† –í —Ä–∞–∑–¥–µ–ª–µ '{command}' –Ω–µ—Ç –º–µ—Å—Ç.")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    
    back_markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥—É", callback_data="back_to_city")
    back_markup.add(back_btn)

    bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è", reply_markup=back_markup)



@bot.callback_query_handler(func=lambda call: True)
def callback(callback):
    chat_id = callback.message.chat.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    if callback.data == 'city_list':
        markup = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(city, callback_data=city) for city in cities]
        for i in range(0, len(buttons), 3):
            markup.row(*buttons[i:i+3])

        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    elif callback.data == 'input_city':
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        bot.register_next_step_handler(msg, lambda m: process_city(m.chat.id, m.text))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–≥–æ–¥—É
    elif callback.data.startswith('weather_'):
        city = callback.data.split('_')[1]
        weather = get_weather(city)
        bot.send_message(chat_id, f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}: {weather}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    elif callback.data in cities:
        process_city(chat_id, callback.data)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤: –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ—Ç–µ–ª–∏, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
    elif callback.data in ['attractions', 'hotels', 'restaurants']:
        user_info = user_data.get(chat_id)
        if user_info:
            send_places(callback.message, user_info["trip_code"], user_info["trip_name"], callback.data)
        else:
            bot.send_message(chat_id, "‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")

    elif callback.data == "back_to_city":
        user_info = user_data.get(chat_id)
        if user_info:
            process_city(chat_id, user_info["city_name"])
        else:
            bot.send_message(chat_id, "‚ö† –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥.")


    else:
        bot.send_message(chat_id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



def process_city(chat_id, city_name):
    city_info = get_city_info(city_name)

    if city_info:
        description, image_url, trip_code, trip_name = city_info
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ user_data
        user_data[chat_id] = {"city_name": city_name, "trip_code": trip_code, "trip_name": trip_name}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        bot.send_photo(chat_id, open(image_url, 'rb'))
        bot.send_message(chat_id, f"üèôÔ∏è {city_name}\n\n{description}", parse_mode='Markdown')

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–±–æ—Ä–∞
        inline_markup = types.InlineKeyboardMarkup()
        weather_btn = types.InlineKeyboardButton('üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É', callback_data=f'weather_{city_name}')
        map_btn = types.InlineKeyboardButton('üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url=f'https://www.google.com/maps/search/?q={city_name}&hl=ru')
        inline_markup.row(weather_btn, map_btn)

        inline_markup.row(
            types.InlineKeyboardButton('üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', callback_data='attractions'),
            types.InlineKeyboardButton('üè® –û—Ç–µ–ª–∏', callback_data='hotels'),
            types.InlineKeyboardButton('üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã', callback_data='restaurants')
        )

        inline_markup.add(types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='city_list'))

        bot.send_message(chat_id, "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=inline_markup)
    
    else:
        bot.send_message(chat_id, "‚ùó –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


bot.polling(none_stop=True)