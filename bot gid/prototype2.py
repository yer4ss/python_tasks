import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os
import requests
import time
import sqlite3
from bs4 import BeautifulSoup


bot = telebot.TeleBot('7780668347:AAFTwSbXzNg02naVu_g2x-k2GiPiYPVlOng')


def get_city_info(name):
   conn = sqlite3.connect('cities.db')
   cursor = conn.cursor()
   cursor.execute('SELECT description, image_url FROM cities WHERE name = ?', (name,))
   result = cursor.fetchone()
   conn.close()
   return result

def get_city_list():
   conn = sqlite3.connect('cities.db')
   cursor = conn.cursor()
   cursor.execute('SELECT name FROM cities')
   cities = [city[0] for city in cursor.fetchall()]
   conn.close()
   return cities

cities = get_city_list()



api_key = '17697edb22cd6287f4a12ccb3e497513'
weather_cache = {}
CACHE_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç

def get_weather(city):
      current_time = time.time()
      if city in weather_cache and current_time - weather_cache[city]['time'] < CACHE_TIMEOUT:
         return weather_cache[city]['data']

      url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
      response = requests.get(url).json()
      if response.get("main"):
         weather_desc = response['weather'][0]['description']
         temp = response["main"]["temp"]
         wind = response["wind"]["speed"]
         humidity = response["main"]["humidity"]
         pressure = response["main"]["pressure"]
         cloudiness = response["clouds"]["all"]

         weather_data = (
            f"{weather_desc.capitalize()}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
            f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {cloudiness}%"
         )
         weather_cache[city] = {'data': weather_data, 'time': current_time}
         return weather_data

      else:
         return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É."

@bot.message_handler(commands=['help'])
def help(message):
   bot.send_message(message.chat.id, 
                     "<b>–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                     "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
                     "/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –±–æ—Ç–µ\n"
                     "/about ‚Äî —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n"
                     "/stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º", parse_mode='html')

@bot.message_handler(commands=['about'])
def about(message):
   bot.send_message(message.chat.id, 
                     "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é Python –∏ Telegram API.\n"
                     "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: <em><b>yerazz</b></em>", parse_mode='html')

@bot.message_handler(commands=['stop'])
def stop(message):

   # chat_id = message.chat.id
   # for i in range(message.message_id - 20, message.message_id + 1):
   #    try:
   #       bot.delete_message(chat_id, i)
   #    except Exception as e:
   #       print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i}: {e}")

   bot.send_message(message.chat.id, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
   os._exit(0)

@bot.message_handler(commands=['start'])
def start(message):

   command_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
   command_markup.row('/start', '/stop')
   command_markup.row('/help', '/about')

   bot.send_message(message.chat.id, 
                     f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                     "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É! üá∞üáø\n"
                     "–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É. üåç‚ú®", reply_markup=command_markup)

   inline_markup = types.InlineKeyboardMarkup()
   btn1 = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥', callback_data='select_city')
   btn2 = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='input_city')
   inline_markup.row(btn1, btn2)

   bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",  reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: True)
def callback(callback):
   if callback.data == 'select_city':
      markup = types.InlineKeyboardMarkup()
      for city in cities:
            markup.add(types.InlineKeyboardButton(city, callback_data=city))
      bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)

   elif callback.data == 'input_city':
      msg = bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
      bot.register_next_step_handler(msg, process_city_input)

   elif callback.data.startswith('weather_'):
      city = callback.data.split('_')[1]
      weather = get_weather(city)
      bot.send_message(callback.message.chat.id, f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n{weather}")

   else:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–±–æ—Ä–∞, –∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
      process_city(callback.message.chat.id, callback.data)


def process_city_input(message):
   city_name = message.text
   city_info = get_city_info(city_name)
   if city_info:
      description, image_url = city_info
      bot.send_photo(message.chat.id, open(image_url, 'rb'))
      bot.send_message(message.chat.id, f"üèôÔ∏è {city_name}\n\n{description}", parse_mode='Markdown')
      
      inline_markup = types.InlineKeyboardMarkup()
      inline_markup.add(types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='select_city'))
      inline_markup.add(types.InlineKeyboardButton('üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É', callback_data=f'weather_{city_name}'))
      inline_markup.add(types.InlineKeyboardButton('üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url=f'https://www.google.com/maps/search/?q={city_name}&hl=ru'))
      bot.send_message(message.chat.id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=inline_markup)
   else:
      bot.send_message(message.chat.id, "‚ùó –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def process_city(chat_id, city):
   """–û–¥–∏–Ω –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ, —Ç–∞–∫ –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
   city_info = get_city_info(city)
   if city_info:
      description, image_url = city_info
      bot.send_photo(chat_id, open(image_url, 'rb'))
      bot.send_message(chat_id, f"üèôÔ∏è *{city}*\n\n{description}", parse_mode='Markdown')

      inline_markup = types.InlineKeyboardMarkup()
      inline_markup.add(types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='select_city'))
      inline_markup.add(types.InlineKeyboardButton('üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É', callback_data=f'weather_{city}'))
      inline_markup.add(types.InlineKeyboardButton('üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url=f'https://www.google.com/maps/search/?q={city}&hl=ru'))
      bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=inline_markup)
   else:
      bot.send_message(chat_id, "‚ùó –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")




# @bot.message_handler(commands=['city'])
# def send_city_info(message):
#     url = "https://www.tripadvisor.ru/Tourism-g298251-Almaty-Vacations.html"
#     headers = {
#         "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
#     }
#     response = requests.get(url, headers=headers)
    
#     if response.status_code == 200:
#         soup = BeautifulSoup(response.text, "html.parser")
#         places = []
        
#         for place in soup.find_all("div", class_="JziVN _c"):
#             name_tag = place.find("div", class_="FGwzt ukgoS")
#             rating_tag = place.find("div", class_="biGQs _P pZUbB hmDzD")
#             reviews_tag = place.find("div", class_="nKWJn u qMyjI")
#             desc_tag = place.find("span", class_="biGQs _P pZUbB hmDzD")
#             img_tag = place.find("img")
            
#             if name_tag and rating_tag and reviews_tag and desc_tag and img_tag:
#                 name = name_tag.text.strip()
#                 rating = rating_tag.text.strip()
#                 reviews = reviews_tag.find("div", class_="biGQs _P pZUbB hmDzD").text.strip()
#                 description = desc_tag.text.strip()
#                 img_url = img_tag["src"].split(" ")[0]
                
#                 places.append({
#                     "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
#                     "–†–µ–∏ÃÜ—Ç–∏–Ω–≥": rating,
#                     "–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤": reviews,
#                     "–û–ø–∏—Å–∞–Ω–∏–µ": description,
#                     "–ö–∞—Ä—Ç–∏–Ω–∫–∞": img_url
#                 })
        
#         for place in places[:5]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 5 –º–µ—Å—Ç
#             bot.send_message(message.chat.id, f"{place['–ù–∞–∑–≤–∞–Ω–∏–µ']} ({place['–†–µ–∏ÃÜ—Ç–∏–Ω–≥']}) - {place['–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤']} –æ—Ç–∑—ã–≤–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ: {place['–û–ø–∏—Å–∞–Ω–∏–µ']}\n–ö–∞—Ä—Ç–∏–Ω–∫–∞: {place['–ö–∞—Ä—Ç–∏–Ω–∫–∞']}")
#     else:
#         bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö¬†—Å¬†TripAdvisor")


bot.polling(none_stop=True)